/********************* ROLES **********************/

CREATE ROLE RUSUARIO;
/********************* UDFS ***********************/

/********************* FUNCTIONS ***********************/

/****************** SEQUENCES ********************/

/******************** DOMAINS *********************/

/******************* PROCEDURES ******************/

/******************* PACKAGES ******************/

/******************** TABLES **********************/

CREATE TABLE TBL_EJEMPLAR
(
  ISBN CHAR(20) NOT NULL,
  NUMERO INTEGER NOT NULL,
  UBICACION VARCHAR(30),
  CONSTRAINT PK_TBL_EJEMPLAR PRIMARY KEY (ISBN,NUMERO)
);
CREATE TABLE TBL_LIBRO
(
  ISBN CHAR(20) NOT NULL,
  TITULO VARCHAR(60) NOT NULL,
  UE INTEGER DEFAULT 0,
  CONSTRAINT PK_TBL_LIBRO PRIMARY KEY (ISBN)
);
/********************* VIEWS **********************/

/******************* EXCEPTIONS *******************/

CREATE EXCEPTION EX_EJEMPLAR
'Los ejemplares deben eliminarse desde el ultimo hacia el primero';
CREATE EXCEPTION EX_PRIMARY_KEY
'No puede modificarse la clave primaria';
/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER TRG_AD_EJEMPLAR FOR TBL_EJEMPLAR ACTIVE
AFTER DELETE POSITION 0

AS
BEGIN
    UPDATE TBL_LIBRO SET UE = UE - 1 WHERE ISBN = OLD.ISBN;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_AI_EJEMPLAR FOR TBL_EJEMPLAR ACTIVE
AFTER INSERT POSITION 0

AS
BEGIN
    UPDATE TBL_LIBRO SET UE = UE + 1 WHERE ISBN = NEW.ISBN;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BD_EJEMPLAR FOR TBL_EJEMPLAR ACTIVE
BEFORE DELETE POSITION 0

AS
BEGIN
    IF((SELECT UE FROM TBL_LIBRO WHERE ISBN = OLD.ISBN) <> OLD.NUMERO) THEN
        EXCEPTION EX_EJEMPLAR;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BI_EJEMPLAR FOR TBL_EJEMPLAR ACTIVE
BEFORE INSERT POSITION 0

AS
DECLARE VARIABLE NUM TYPE OF COLUMN TBL_EJEMPLAR.NUMERO;
BEGIN
    SELECT UE FROM TBL_LIBRO WHERE ISBN = NEW.ISBN INTO :NUM;
    NEW.NUMERO = :NUM + 1;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BU_EJEMPLAR FOR TBL_EJEMPLAR ACTIVE
BEFORE UPDATE POSITION 0

AS
BEGIN
    IF(NEW.ISBN <> OLD.ISBN OR NEW.NUMERO <> OLD.NUMERO) THEN
        EXCEPTION EX_PRIMARY_KEY;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BU_LIBRO FOR TBL_LIBRO ACTIVE
BEFORE UPDATE POSITION 0

AS
BEGIN
    IF(OLD.ISBN <> NEW.ISBN) THEN
        EXCEPTION EX_PRIMARY_KEY;
END
^
SET TERM ; ^
/******************** DB TRIGGERS ********************/

/******************** DDL TRIGGERS ********************/


GRANT RUSUARIO TO USUARIO;
GRANT DELETE, INSERT, SELECT, UPDATE
 ON TBL_EJEMPLAR TO  ROLUSUARIO;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_EJEMPLAR TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_EJEMPLAR TO TRIGGER TRG_AD_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_EJEMPLAR TO TRIGGER TRG_AI_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_EJEMPLAR TO TRIGGER TRG_BD_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_EJEMPLAR TO TRIGGER TRG_BI_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_EJEMPLAR TO TRIGGER TRG_BU_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_EJEMPLAR TO TRIGGER TRG_BU_LIBRO;

GRANT DELETE, INSERT, SELECT, UPDATE
 ON TBL_LIBRO TO  ROLUSUARIO;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_LIBRO TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_LIBRO TO TRIGGER TRG_AD_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_LIBRO TO TRIGGER TRG_AI_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_LIBRO TO TRIGGER TRG_BD_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_LIBRO TO TRIGGER TRG_BI_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_LIBRO TO TRIGGER TRG_BU_EJEMPLAR;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_LIBRO TO TRIGGER TRG_BU_LIBRO;

