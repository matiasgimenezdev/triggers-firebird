/********************* ROLES **********************/

/********************* UDFS ***********************/

/********************* FUNCTIONS ***********************/

/****************** SEQUENCES ********************/

CREATE SEQUENCE GEN_ID_PRODUCTO ;
CREATE SEQUENCE GEN_NUMERO_FACTURA ;
/******************** DOMAINS *********************/

/******************* PROCEDURES ******************/

/******************* PACKAGES ******************/

/******************** TABLES **********************/

CREATE TABLE TBL_DETALLE
(
  NUMERO INTEGER NOT NULL,
  ID INTEGER NOT NULL,
  CANTIDAD DOUBLE PRECISION NOT NULL,
  PRECIO DOUBLE PRECISION NOT NULL,
  CONSTRAINT PK_TBL_DETALLE PRIMARY KEY (NUMERO,ID)
);
CREATE TABLE TBL_FACTURA
(
  NUMERO INTEGER NOT NULL,
  IMPORTE DOUBLE PRECISION DEFAULT 0.0,
  ESTADO SMALLINT DEFAULT 0,
  FECHA DATE,
  CONSTRAINT PK_TBL_FACTURA PRIMARY KEY (NUMERO)
);
CREATE TABLE TBL_FACTURA_AUX
(
  FECHA_ULTIMA DATE
);
CREATE TABLE TBL_PRODUCTO
(
  ID INTEGER NOT NULL,
  DESCRIPCION VARCHAR(60) NOT NULL,
  STOCK DOUBLE PRECISION NOT NULL,
  PRECIO_BASE DOUBLE PRECISION NOT NULL,
  PRECIO_COSTO DOUBLE PRECISION NOT NULL,
  CONSTRAINT PK_TBL_PRODUCTO PRIMARY KEY (ID)
);
/********************* VIEWS **********************/

/******************* EXCEPTIONS *******************/

CREATE EXCEPTION EX_CANTIDAD
'No se puede facturar cantidad 0 (cero) de un producto';
CREATE EXCEPTION EX_ESTADO
'ERROR CAMBIO DE ESTADO';
CREATE EXCEPTION EX_FECHA
'ERROR FECHA';
CREATE EXCEPTION EX_PRECIO
'ERROR PRECIO';
CREATE EXCEPTION EX_STOCK
'El stock del producto no es suficiente';
/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER TRG_AD_DETALLE FOR TBL_DETALLE ACTIVE
AFTER DELETE POSITION 0

AS
BEGIN
    UPDATE TBL_PRODUCTO SET STOCK = STOCK + OLD.CANTIDAD WHERE ID = OLD.ID;
    UPDATE TBL_FACTURA SET IMPORTE = IMPORTE - (OLD.CANTIDAD * OLD.PRECIO) WHERE NUMERO = OLD.NUMERO;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_AI_DETALLE FOR TBL_DETALLE ACTIVE
AFTER INSERT POSITION 0

AS
BEGIN
    UPDATE TBL_PRODUCTO SET STOCK = STOCK - NEW.CANTIDAD WHERE ID = NEW.ID;
    UPDATE TBL_FACTURA SET IMPORTE = IMPORTE + (NEW.CANTIDAD * NEW.PRECIO) WHERE NUMERO = NEW.NUMERO;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_AI_FACTURA FOR TBL_FACTURA ACTIVE
AFTER INSERT POSITION 0

AS
BEGIN
    IF(EXISTS(SELECT FECHA_ULTIMA FROM TBL_FACTURA_AUX)) THEN
        UPDATE TBL_FACTURA_AUX SET FECHA_ULTIMA = NEW.FECHA;
    ELSE
        INSERT INTO TBL_FACTURA_AUX (FECHA_ULTIMA ) VALUES (NEW.FECHA);

END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_AU_DETALLE FOR TBL_DETALLE ACTIVE
AFTER UPDATE POSITION 0

AS
BEGIN
    IF((OLD.PRECIO <> NEW.PRECIO) OR (NEW.CANTIDAD <> OLD.CANTIDAD)) THEN BEGIN
        UPDATE TBL_PRODUCTO SET STOCK = STOCK + (OLD.CANTIDAD - NEW.CANTIDAD) WHERE ID = NEW.ID;
        UPDATE TBL_FACTURA SET IMPORTE = IMPORTE + (NEW.PRECIO * NEW.CANTIDAD) WHERE NUMERO = NEW.NUMERO;
        UPDATE TBL_FACTURA SET IMPORTE = IMPORTE - (OLD.PRECIO * OLD.CANTIDAD) WHERE NUMERO = NEW.NUMERO;
    END        
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_AU_FACTURA FOR TBL_FACTURA ACTIVE
AFTER UPDATE POSITION 0

AS
DECLARE VARIABLE CANTIDAD TYPE OF COLUMN TBL_DETALLE.CANTIDAD;
DECLARE VARIABLE ID TYPE OF COLUMN TBL_DETALLE.ID;
BEGIN    
    /* FACTURA FINALIZADA => FACTURA ANULADA*/
    IF(OLD.ESTADO = 1 AND NEW.ESTADO = 2) THEN
        FOR SELECT CANTIDAD, ID FROM TBL_DETALLE WHERE NUMERO = NEW.NUMERO INTO :CANTIDAD, :ID do BEGIN
            UPDATE TBL_PRODUCTO SET STOCK = STOCK + :CANTIDAD WHERE ID = :ID;
        END
        
    /* FACTURA ANULADA => FACTURA FINALIZADA */
    IF(OLD.ESTADO = 2 AND NEW.ESTADO = 1) THEN
        FOR SELECT CANTIDAD, ID FROM TBL_DETALLE WHERE NUMERO = NEW.NUMERO INTO :CANTIDAD, :ID DO BEGIN
            IF((SELECT STOCK FROM TBL_PRODUCTO WHERE ID = :ID) < :CANTIDAD) THEN
                EXCEPTION EX_STOCK;
            UPDATE TBL_PRODUCTO SET STOCK = STOCK - :CANTIDAD WHERE ID = :ID;
        END
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BI_DETALLE FOR TBL_DETALLE ACTIVE
BEFORE INSERT POSITION 0

AS
DECLARE VARIABLE STOCK TYPE OF COLUMN TBL_PRODUCTO.STOCK;
DECLARE VARIABLE PRECIO_BASE TYPE OF COLUMN TBL_PRODUCTO.PRECIO_BASE;
BEGIN
    IF (NEW.CANTIDAD = 0) THEN EXCEPTION EX_CANTIDAD;

    SELECT STOCK, PRECIO_BASE FROM TBL_PRODUCTO WHERE ID = NEW.ID INTO :STOCK, :PRECIO_BASE;

    IF(NEW.PRECIO < :PRECIO_BASE) THEN
        EXCEPTION EX_PRECIO 'El precio de venta de un producto debe ser mayor o igual al precio base del mismo.';
    
    if(NEW.CANTIDAD > :STOCK) THEN
        EXCEPTION EX_STOCK;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BI_FACTURA FOR TBL_FACTURA ACTIVE
BEFORE INSERT POSITION 0

AS
DECLARE VARIABLE ULTIMA_FECHA TYPE OF COLUMN TBL_FACTURA.FECHA;
BEGIN
    NEW.NUMERO = GEN_ID(GEN_NUMERO_FACTURA, 1);
    NEW.ESTADO = 0;
    NEW.IMPORTE = 0;
    
    IF(NEW.FECHA IS NULL) THEN 
        NEW.FECHA = CURRENT_DATE;
    
    IF(NEW.FECHA < (SELECT FECHA_ULTIMA FROM TBL_FACTURA_AUX)) THEN
        EXCEPTION EX_FECHA 'La fecha de facturación de una factura no puede ser menor a la de la ultima facturacion'; 
    
    IF(NEW.FECHA > CURRENT_DATE) THEN
            EXCEPTION EX_FECHA 'La fecha de facturación no puede ser mayor a la actual';
    
        
    
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BI_PRODUCTO FOR TBL_PRODUCTO ACTIVE
BEFORE INSERT POSITION 0

AS
BEGIN
    NEW.ID = GEN_ID(GEN_ID_PRODUCTO, 1);
    IF(NEW.PRECIO_BASE < NEW.PRECIO_COSTO) THEN 
        EXCEPTION EX_PRECIO 'El precio base de un producto debe ser mayor o igual al precio de costo del mismo.';
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BU_DETALLE FOR TBL_DETALLE ACTIVE
BEFORE UPDATE POSITION 0

AS
DECLARE VARIABLE STOCK TYPE OF COLUMN TBL_PRODUCTO.STOCK;
DECLARE VARIABLE PRECIO_BASE TYPE OF COLUMN TBL_PRODUCTO.PRECIO_BASE;
BEGIN
    IF (NEW.CANTIDAD = 0) THEN EXCEPTION EX_CANTIDAD;
    
    SELECT PRECIO_BASE, STOCK FROM TBL_PRODUCTO WHERE ID = NEW.ID INTO :PRECIO_BASE, :STOCK;
        
    IF(OLD.PRECIO <> NEW.PRECIO) THEN
        IF(NEW.PRECIO < :PRECIO_BASE) THEN 
            EXCEPTION EX_PRECIO 'El precio de venta de un producto debe ser mayor o igual al precio base del mismo.';
    
    IF(OLD.CANTIDAD < NEW.CANTIDAD) THEN
        if(:STOCK < (NEW.CANTIDAD - OLD.CANTIDAD)) THEN
            EXCEPTION EX_STOCK;
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BU_FACTURA FOR TBL_FACTURA ACTIVE
BEFORE UPDATE POSITION 0

AS
BEGIN
    IF(NEW.FECHA <> OLD.FECHA) THEN
        EXCEPTION EX_FECHA 'No se puede modificar la fecha de una factura';
            
    IF(OLD.ESTADO = 1 AND NEW.ESTADO = 0) THEN
        EXCEPTION EX_ESTADO 'Una factura finalizada no puede volver a estar en estado iniciada';
    
    IF(OLD.ESTADO = 2 AND NEW.ESTADO = 0) THEN
        EXCEPTION EX_ESTADO 'Una factura anulada no puede volver a estar en estado iniciada';
     
END
^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER TRG_BU_PRODUCTO FOR TBL_PRODUCTO ACTIVE
BEFORE UPDATE POSITION 0

AS
BEGIN
    IF((NEW.PRECIO_BASE <> OLD.PRECIO_BASE) OR (NEW.PRECIO_COSTO <> OLD.PRECIO_COSTO)) THEN
        IF(NEW.PRECIO_COSTO > NEW.PRECIO_BASE) THEN
            EXCEPTION EX_PRECIO 'El precio base de un producto debe ser mayor o igual al precio de costo del mismo.';
END
^
SET TERM ; ^
/******************** DB TRIGGERS ********************/

/******************** DDL TRIGGERS ********************/


ALTER TABLE TBL_DETALLE ADD CONSTRAINT FK_TBL_DETALLE_FACTURA
  FOREIGN KEY (NUMERO) REFERENCES TBL_FACTURA (NUMERO) ON DELETE CASCADE;
ALTER TABLE TBL_DETALLE ADD CONSTRAINT FK_TBL_DETALLE_PRODUCTO
  FOREIGN KEY (ID) REFERENCES TBL_PRODUCTO (ID) ON DELETE CASCADE;
ALTER TABLE TBL_DETALLE ADD CONSTRAINT CONSTRAINT_CANTIDAD
  check (CANTIDAD >= 0.0);
ALTER TABLE TBL_DETALLE ADD CONSTRAINT CONSTRAINT_PRECIO_DETALLE
  check (PRECIO >= 0.0);
ALTER TABLE TBL_FACTURA ADD CONSTRAINT CONSTRAINT_ESTADO
  check (ESTADO IN (0,1,2));
ALTER TABLE TBL_FACTURA ADD CONSTRAINT CONSTRAINT_IMPORTE
  check (IMPORTE >= 0.0);
ALTER TABLE TBL_PRODUCTO ADD CONSTRAINT CONSTRAINT_PRECIO
  check (PRECIO_BASE >= 0.0 AND PRECIO_COSTO >= 0.0);
ALTER TABLE TBL_PRODUCTO ADD CONSTRAINT CONSTRAINT_STOCK
  check (STOCK >= 0.0);
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_DETALLE TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT, UPDATE
 ON TBL_DETALLE TO TRIGGER TRG_AD_DETALLE;

GRANT SELECT, UPDATE
 ON TBL_DETALLE TO TRIGGER TRG_AI_DETALLE;

GRANT SELECT
 ON TBL_DETALLE TO TRIGGER TRG_AU_DETALLE;

GRANT SELECT, UPDATE
 ON TBL_DETALLE TO TRIGGER TRG_AU_FACTURA;

GRANT SELECT, UPDATE
 ON TBL_DETALLE TO TRIGGER TRG_BI_DETALLE;

GRANT SELECT
 ON TBL_DETALLE TO TRIGGER TRG_BU_DETALLE;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_FACTURA TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT, UPDATE
 ON TBL_FACTURA TO TRIGGER TRG_AD_DETALLE;

GRANT SELECT, UPDATE
 ON TBL_FACTURA TO TRIGGER TRG_AI_DETALLE;

GRANT SELECT, UPDATE
 ON TBL_FACTURA TO TRIGGER TRG_AU_DETALLE;

GRANT SELECT
 ON TBL_FACTURA TO TRIGGER TRG_AU_FACTURA;

GRANT SELECT, UPDATE
 ON TBL_FACTURA TO TRIGGER TRG_BI_DETALLE;

GRANT SELECT
 ON TBL_FACTURA TO TRIGGER TRG_BI_FACTURA;

GRANT SELECT
 ON TBL_FACTURA TO TRIGGER TRG_BU_DETALLE;

GRANT SELECT
 ON TBL_FACTURA TO TRIGGER TRG_BU_FACTURA;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_FACTURA_AUX TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON TBL_PRODUCTO TO  SYSDBA WITH GRANT OPTION;

GRANT SELECT, UPDATE
 ON TBL_PRODUCTO TO TRIGGER TRG_AD_DETALLE;

GRANT SELECT, UPDATE
 ON TBL_PRODUCTO TO TRIGGER TRG_AI_DETALLE;

GRANT SELECT, UPDATE
 ON TBL_PRODUCTO TO TRIGGER TRG_AU_DETALLE;

GRANT SELECT, UPDATE
 ON TBL_PRODUCTO TO TRIGGER TRG_AU_FACTURA;

GRANT SELECT, UPDATE
 ON TBL_PRODUCTO TO TRIGGER TRG_BI_DETALLE;

GRANT SELECT
 ON TBL_PRODUCTO TO TRIGGER TRG_BI_PRODUCTO;

GRANT SELECT
 ON TBL_PRODUCTO TO TRIGGER TRG_BU_DETALLE;

GRANT SELECT
 ON TBL_PRODUCTO TO TRIGGER TRG_BU_PRODUCTO;

